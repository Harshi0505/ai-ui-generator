import React, { useState, useRef, useEffect } from "react";

const STARTER = `<!doctype html>
<html>
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Starter UI</title>
<style>
body{font-family:Inter,system-ui,Segoe UI,Roboto,Arial;margin:0;background:#f3f4f6}
.wrap{max-width:900px;margin:36px auto;padding:20px;background:white;border-radius:10px}
.h{font-size:22px;margin:0 0 8px}
.muted{color:#6b7280}
.btn{background:#6366f1;color:white;padding:8px 12px;border-radius:8px;text-decoration:none;display:inline-block}
</style>
</head>
<body>
<div class="wrap">
  <h1 class="h">Starter UI</h1>
  <p class="muted">This HTML was generated by the AI.</p>
  <p><a class="btn" href="#">Primary Action</a></p>
</div>
</body>
</html>`;

export default function LandingPage() {
  const [showGenerator, setShowGenerator] = useState(false);
  const [prompt, setPrompt] = useState("");
  const [isListening, setIsListening] = useState(false);
  const [sketchDataUrl, setSketchDataUrl] = useState(null);
  const [generatedCode, setGeneratedCode] = useState(STARTER);
  const [isGenerating, setIsGenerating] = useState(false);
  const [device, setDevice] = useState("desktop");
  const [editorOpen, setEditorOpen] = useState(false);
  const [editorCode, setEditorCode] = useState(STARTER);
  const recognitionRef = useRef(null);
  const iframeRef = useRef(null);

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
      const rec = new SpeechRecognition();
      rec.continuous = false;
      rec.lang = "en-US";
      rec.interimResults = false;
      rec.onresult = (e) => {
        const text = e.results[0][0].transcript;
        setPrompt((p) => (p ? p + " " + text : text));
      };
      rec.onend = () => setIsListening(false);
      recognitionRef.current = rec;
    }
  }, []);

  useEffect(() => {
    if (!editorOpen) setEditorCode(generatedCode);
  }, [generatedCode, editorOpen]);

  function startStopListening() {
    const rec = recognitionRef.current;
    if (!rec) return alert("SpeechRecognition not supported in this browser.");
    if (!isListening) {
      try {
        rec.start();
        setIsListening(true);
      } catch (e) {
        console.error(e);
      }
    } else {
      rec.stop();
      setIsListening(false);
    }
  }

  function onSketchUpload(e) {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    const reader = new FileReader();
    reader.onload = (ev) => setSketchDataUrl(ev.target.result);
    reader.readAsDataURL(f);
  }

  async function generateFromPrompt(source = "prompt") {
    setIsGenerating(true);
    try {
      const response = await fetch("http://localhost:5000/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt, sketchDataUrl, source }),
      });

      if (!response.ok) {
        const txt = await response.text();
        throw new Error("Backend error: " + txt);
      }

      const data = await response.json();
      setGeneratedCode(data.html || "<!-- AI returned nothing -->");
      setEditorOpen(false);

      if (iframeRef.current) {
        iframeRef.current.srcdoc = data.html || "<!-- AI returned nothing -->";
      }
    } catch (err) {
      console.error(err);
    } finally {
      setIsGenerating(false);
    }
  }

  function applyEditorChanges() {
    setGeneratedCode(editorCode);
    setEditorOpen(false);
  }

  function downloadCode() {
    const blob = new Blob([generatedCode], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "generated-ui.html";
    a.click();
    URL.revokeObjectURL(url);
  }

  function deviceFrameStyle() {
    if (device === "mobile") return { width: 375, height: 667, border: "1px solid #ddd" };
    if (device === "tablet") return { width: 768, height: 1024, border: "1px solid #ddd" };
    return { width: "100%", height: 600, border: "1px solid #ddd" };
  }

  return (
    <div style={{ minHeight: "100vh", background: "linear-gradient(120deg, #030346, #1A1A2E)", color: "#fff", fontFamily: "Inter, sans-serif" }}>
      {/* Hero Section */}
      <div style={{ padding: 60, textAlign: "center" }}>
        <h1 style={{ fontSize: 48, marginBottom: 20 }}>Design Smarter, Not Harder</h1>
        <p style={{ fontSize: 18, marginBottom: 30 }}>AI-powered UI design generator for modern websites</p>
        <button
          onClick={() => setShowGenerator(true)}
          style={{ padding: "12px 24px", fontSize: 18, borderRadius: 12, background: "#00f0ff", color: "#000", boxShadow: "0 0 20px #00f0ff", cursor: "pointer" }}
        >
          Try Now
        </button>
      </div>

      {/* Features Section */}
      <div style={{ display: "flex", justifyContent: "center", gap: 20, marginBottom: 40 }}>
        {[
          { title: "AI Text-to-UI", icon: "üíª" },
          { title: "Voice Input", icon: "üé§" },
          { title: "Sketch-to-Design", icon: "‚úèÔ∏è" },
        ].map((f, i) => (
          <div key={i} style={{ background: "#111", padding: 20, borderRadius: 12, flex: 1, textAlign: "center", boxShadow: "0 0 12px #00f0ff" }}>
            <div style={{ fontSize: 36 }}>{f.icon}</div>
            <div style={{ marginTop: 12, fontSize: 16 }}>{f.title}</div>
          </div>
        ))}
      </div>

      {/* UI Generator Section (only one) */}
      {showGenerator && (
        <div style={{ maxWidth: 1200, margin: "0 auto", padding: 20 }}>
          {/* Prompt + Buttons */}
          <div style={{ marginBottom: 20 }}>
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="Describe the UI you want..."
              rows={4}
              style={{ width: "100%", padding: 12, borderRadius: 8, border: "1px solid #ccc", fontSize: 14 }}
            />
            <div style={{ display: "flex", gap: 8, marginTop: 10 }}>
              <button onClick={() => generateFromPrompt("prompt")} disabled={isGenerating} style={{ flex: 1 }}>
                {isGenerating ? "Generating..." : "Generate"}
              </button>
              <button onClick={startStopListening} style={{ flex: 1 }}>
                {isListening ? "Stop Voice" : "Voice Input"}
              </button>
              <input type="file" accept="image/*" onChange={onSketchUpload} style={{ flex: 1 }} />
            </div>
          </div> 

          {/* Live Preview */}
          <div style={{ marginBottom: 20 }}>
            <h3>Live Preview</h3>
            <div style={{ border: "1px solid #333", borderRadius: 12, overflow: "hidden", ...deviceFrameStyle() }}>
              <iframe
                title="preview"
                ref={iframeRef}
                srcDoc={generatedCode}
                style={{ width: "100%", height: "100%", border: "none" }}
                sandbox="allow-scripts allow-same-origin"
              />
            </div>
            <div style={{ display: "flex", gap: 8, marginTop: 8 }}>
              <button onClick={() => setDevice("desktop")}>Desktop</button>
              <button onClick={() => setDevice("tablet")}>Tablet</button>
              <button onClick={() => setDevice("mobile")}>Mobile</button>
            </div>
          </div>

          {/* Generate Code Section */}
          <div style={{ marginBottom: 40 }}>
            <h3>Generated Code</h3>
            <pre style={{ background: "#111", padding: 12, borderRadius: 8, overflow: "auto", maxHeight: 300 }}>
              {generatedCode}
            </pre>
            <div style={{ display: "flex", gap: 8, marginTop: 8 }}>
              <button onClick={() => setEditorOpen(true)} style={{ flex: 1 }}>
                Edit
              </button>
              <button onClick={downloadCode} style={{ flex: 1 }}>
                Download HTML
              </button>
            </div>

            {/* Editor Modal */}
           {editorOpen && (
              <div style={{ marginTop: 12, background: "#111", padding: 12, borderRadius: 8 }}>
                <h4>Code Editor</h4>
                <textarea
                  value={editorCode}
                  onChange={(e) => setEditorCode(e.target.value)}
                  style={{ width: "100%", height: 300, fontFamily: "monospace", fontSize: 14, padding: 8 }}
                />
                <div style={{ marginTop: 8 }}>
                  <button onClick={applyEditorChanges} style={{ marginRight: 8 }}>
                    Apply Changes
                  </button>
                  <button onClick={() => setEditorOpen(false)}>Close</button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Footer */}
      <footer style={{ textAlign: "center", padding: 20, color: "#00f0ff", textShadow: "0 0 12px #00f0ff" }}>
        Built with ‚ù§ by Harshitha Kambala
      </footer>
    </div>
  );
}
