import React, { useState, useRef, useEffect } from 'react';
import "./styles.css";



const STARTER = `<!doctype html>
<html>
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Starter UI</title>
<style>
body{font-family:Inter,system-ui,Segoe UI,Roboto,Arial;margin:0;background:#f3f4f6}
.wrap{max-width:900px;margin:36px auto;padding:20px;background:white;border-radius:10px}
.h{font-size:22px;margin:0 0 8px}
.muted{color:#6b7280}
.btn{background:#6366f1;color:white;padding:8px 12px;border-radius:8px;text-decoration:none;display:inline-block}
</style>
</head>
<body>
<div class="wrap">
  <h1 class="h">Starter UI</h1>
  <p class="muted">This HTML was generated by the AI.</p>
  <p><a class="btn" href="#">Primary Action</a></p>
</div>
</body>
</html>`;

export default function UIDesignGenerator() {
  const [prompt, setPrompt] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [sketchDataUrl, setSketchDataUrl] = useState(null);
  const [generatedCode, setGeneratedCode] = useState(STARTER);
  const [isGenerating, setIsGenerating] = useState(false);
  const [device, setDevice] = useState('desktop');
  const [editorOpen, setEditorOpen] = useState(false);
  const [editorCode, setEditorCode] = useState(STARTER);
  const recognitionRef = useRef(null);
  const iframeRef = useRef(null); // âœ… Added iframeRef

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
      const rec = new SpeechRecognition();
      rec.continuous = false;
      rec.lang = 'en-US';
      rec.interimResults = false;
      rec.onresult = (e) => {
        const text = e.results[0][0].transcript;
        setPrompt((p) => (p ? p + ' ' + text : text));
      };
      rec.onend = () => setIsListening(false);
      recognitionRef.current = rec;
    }
  }, []);

  useEffect(() => {
    if (!editorOpen) setEditorCode(generatedCode);
  }, [generatedCode, editorOpen]);

  function startStopListening() {
    const rec = recognitionRef.current;
    if (!rec) return alert('SpeechRecognition not supported in this browser.');
    if (!isListening) {
      try { rec.start(); setIsListening(true); } catch (e) { console.error(e); }
    } else { rec.stop(); setIsListening(false); }
  }

  function onSketchUpload(e) {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    const reader = new FileReader();
    reader.onload = (ev) => setSketchDataUrl(ev.target.result);
    reader.readAsDataURL(f);
  }

  async function generateFromPrompt(source = 'prompt') {
    setIsGenerating(true);
    try {
      const response = await fetch("http://localhost:5000/api/generate", {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt, sketchDataUrl, source })
      });

      if (!response.ok) {
        const txt = await response.text();
        throw new Error('Backend error: ' + txt);
      }

      const data = await response.json();
      setGeneratedCode(data.html || '<!-- AI returned nothing -->');
      setEditorOpen(false);

      // Update iframe directly
      if (iframeRef.current) {
        iframeRef.current.srcdoc = data.html || '<!-- AI returned nothing -->';
      }

    } catch (err) {
      console.error(err);
    } finally {
      setIsGenerating(false);
    }
  }

  function applyEditorChanges() {
    setGeneratedCode(editorCode);
    setEditorOpen(false);
  }

  function downloadCode() {
    const blob = new Blob([generatedCode], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'generated-ui.html'; a.click();
    URL.revokeObjectURL(url);
  }

  function deviceFrameStyle() {
    if (device === 'mobile') return { width: 375, height: 667, border: '1px solid #ddd' };
    if (device === 'tablet') return { width: 768, height: 1024, border: '1px solid #ddd' };
    return { width: '100%', height: 600, border: '1px solid #ddd' };
  }

  return (
    <div style={{ minHeight: '100vh', background: '#eef2f7', padding: 20 }}>
      <div style={{ maxWidth: 1200, margin: '0 auto', display: 'grid', gridTemplateColumns: '1fr 2fr', gap: 18 }}>
        {/* Controls */}
        <div style={{ background: 'white', padding: 16, borderRadius: 10 }}>
          <h2 style={{ margin: 0, marginBottom: 8 }}>AI UI Design Generator</h2>

          <label style={{ fontSize: 13 }}>Text prompt</label>
          <textarea value={prompt} onChange={(e) => setPrompt(e.target.value)} rows={4}
            style={{ width: '100%', padding: 8, marginTop: 6, borderRadius: 6, border: '1px solid #ddd' }}
            placeholder="Describe the UI you want (e.g., clean landing page with hero and features)"
          />

          <div style={{ display: 'flex', gap: 8, marginTop: 10 }}>
            <button onClick={() => generateFromPrompt('prompt')} disabled={isGenerating}
              style={{ padding: '8px 12px', borderRadius: 8, background: '#4f46e5', color: 'white', border: 'none', cursor: 'pointer' }}>
              {isGenerating ? 'Generating...' : 'Generate'}
            </button>
            <button onClick={startStopListening} style={{ padding: '8px 12px', borderRadius: 8 }}>
              {isListening ? 'Stop Voice' : 'Voice Input'}
            </button>
          </div>

          <div style={{ marginTop: 12 }}>
            <label style={{ fontSize: 13 }}>Upload sketch (optional)</label>
            <input type="file" accept="image/*" onChange={onSketchUpload} style={{ display: 'block', marginTop: 8 }} />
            {sketchDataUrl && <div style={{ marginTop: 8 }}><img src={sketchDataUrl} alt="sketch" style={{ width: '100%', borderRadius: 6 }} /></div>}
            {sketchDataUrl && <div style={{ display: 'flex', gap: 8, marginTop: 8 }}>
              <button onClick={() => generateFromPrompt('sketch')} style={{ padding: '8px 12px', borderRadius: 8, background: '#059669', color: 'white', border: 'none' }}>Generate from Sketch</button>
              <button onClick={() => setSketchDataUrl(null)} style={{ padding: '8px 12px', borderRadius: 8 }}>Remove</button>
            </div>}
          </div>

          <div style={{ marginTop: 14, borderTop: '1px solid #eee', paddingTop: 10 }}>
            <h4 style={{ margin: 0 }}>Live Edit</h4>
            <p style={{ marginTop: 6, color: '#6b7280', fontSize: 13 }}>Open the editor to tweak the generated HTML/CSS.</p>
            <div style={{ display: 'flex', gap: 8 }}>
              <button onClick={() => setEditorOpen(true)} style={{ padding: '8px 12px', borderRadius: 8, background: '#f59e0b', border: 'none' }}>Edit in Editor</button>
              <button onClick={downloadCode} style={{ padding: '8px 12px', borderRadius: 8 }}>Download Code</button>
            </div>
          </div>
        </div>

        {/* Preview */}
        <div style={{ background: 'white', padding: 16, borderRadius: 10 }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div>
              <h3 style={{ margin: 0 }}>Live Preview</h3>
              <div style={{ marginTop: 6, fontSize: 13, color: '#6b7280' }}>
                <button onClick={() => setDevice('desktop')} style={{ marginRight: 6 }}>Desktop</button>
                <button onClick={() => setDevice('tablet')} style={{ marginRight: 6 }}>Tablet</button>
                <button onClick={() => setDevice('mobile')}>Mobile</button>
              </div>
            </div>

            <div style={{ display: 'flex', gap: 8 }}>
              <button onClick={() => { setGeneratedCode(STARTER); setEditorOpen(false); }} style={{ padding: '8px 10px', borderRadius: 8 }}>Reset</button>
            </div>
          </div>

          <div style={{ marginTop: 12, display: 'flex', gap: 12 }}>
            <div style={{ flex: 1 }}>
              <div style={{ borderRadius: 8, overflow: 'hidden', background: '#fff', border: '1px solid #e6e9ee' }}>
                <div style={{ padding: 12 }}>
                  <div style={{ fontSize: 12, color: '#6b7280' }}>Rendered output (sandboxed iframe)</div>
                </div>
                <div style={{ padding: 12, display: 'flex', justifyContent: 'center' }}>
                  <div style={deviceFrameStyle()}>
                    <iframe
                      title="preview"
                      ref={iframeRef}
                      srcDoc={generatedCode}
                      style={{ width: "100%", height: "100%", border: "none" }}
                      sandbox="allow-forms allow-scripts allow-same-origin"
                    />
                  </div>
                </div>
              </div>
              <div style={{ marginTop: 8, fontSize: 13, color: '#6b7280' }}>Tip: Edit the code, then click Apply Changes.</div>
            </div>

            <div style={{ width: 340 }}>
              <div style={{ background: '#f8fafc', padding: 10, borderRadius: 8 }}>
                <h4 style={{ margin: 0 }}>Generated code (preview)</h4>
                <pre style={{ marginTop: 8, maxHeight: 380, overflow: 'auto', background: '#fff', padding: 8, borderRadius: 6, border: '1px solid #eee', fontSize: 12 }}>
                  {generatedCode.slice(0, 1200)}{generatedCode.length > 1200 ? "\n\n... (truncated)" : ""}
                </pre>
                <div style={{ display: 'flex', gap: 8, marginTop: 8 }}>
                  <button onClick={() => setEditorOpen(true)} style={{ padding: '8px 10px', borderRadius: 8, background: '#f59e0b', border: 'none' }}>Edit</button>
                  <button onClick={downloadCode} style={{ padding: '8px 10px', borderRadius: 8 }}>Download</button>
                </div>
              </div>
            </div>
          </div>

          {editorOpen && (
            <div style={{ marginTop: 12, background: '#fff', padding: 12, borderRadius: 8, border: '1px solid #eee' }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <h4 style={{ margin: 0 }}>Code Editor</h4>
                <div style={{ display: 'flex', gap: 8 }}>
                  <button onClick={() => { setEditorCode(generatedCode); }} style={{ padding: '6px 8px', borderRadius: 6 }}>Revert</button>
                  <button onClick={() => { setEditorOpen(false); }} style={{ padding: '6px 8px', borderRadius: 6 }}>Close</button>
                </div>
              </div>

              <textarea value={editorCode} onChange={(e) => setEditorCode(e.target.value)}
                style={{ width: '100%', height: 220, marginTop: 8, padding: 8, fontFamily: 'monospace', fontSize: 13 }} />

              <div style={{ display: 'flex', gap: 8, marginTop: 8 }}>
                <button onClick={applyEditorChanges} style={{ padding: '8px 12px', borderRadius: 8, background: '#059669', color: 'white', border: 'none' }}>Apply Changes</button>
                <button onClick={() => { const win = window.open(); win.document.write(editorCode); win.document.close(); }} style={{ padding: '8px 12px', borderRadius: 8 }}>Open in New Tab</button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
